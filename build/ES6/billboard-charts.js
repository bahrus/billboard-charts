(function(){function a(){class a extends HTMLElement{get publish(){return this._publish}set publish(a){a?this.setAttribute('publish',''):this.removeAttribute('publish')}get cssPath(){return this._cssPath}set cssPath(a){this.setAttribute('css-path',a)}get data(){return this._data}set data(a){this._data=a,this.onPropsChange()}get newData(){return this._newData}set newData(a){this._newData=a,this.onNewData()}get staleData(){return this._staleData}set staleData(a){this._staleData=a,this.onStaleData()}set selectedElement(a){this._selectedElement=a;const b=new CustomEvent('selected-element-changed',{detail:{value:a},bubbles:!0,composed:!0});this.dispatchEvent(b)}get selectedElement(){return this._selectedElement}static get observedAttributes(){return['publish','css-path','data','newData','staleData']}static get is(){return'billboard-charts'}constructor(){super(),this.attachShadow({mode:'open'}),this.shadowRoot.appendChild(b.content.cloneNode(!0))}_upgradeProperty(a){if(this.hasOwnProperty(a)){let b=this[a];delete this[a],this[a]=b}}attributeChangedCallback(a,b,c){'publish'===a?(this._publish=null!==c,this.onPropsChange()):this['_'+this.snakeToCamel(a)]=c}get chart(){return this._chart}snakeToCamel(a){return a.replace(/(\-\w)/g,function(a){return a[1].toUpperCase()})}connectedCallback(){console.log('connectedCallback'),a.observedAttributes.forEach((a)=>{this._upgradeProperty(this.snakeToCamel(a))}),this.cssPath||(this.cssPath=d+'/billboard.min.css');const b=document.createElement('link');b.setAttribute('rel','stylesheet'),b.setAttribute('type','text/css'),b.setAttribute('href',this._cssPath),b.addEventListener('load',()=>{this.shadowRoot.getElementById('chartTarget').style.visibility='visible'}),this.shadowRoot.appendChild(b)}onPropsChange(){this.publish&&this.data&&this.data.data&&(this.data.bindto=this.shadowRoot.getElementById('chartTarget'),!this.data.data.onclick&&(this.data.data.onclick=(a)=>{this.selectedElement=a}),this._chart?this._chart=bb.generate(this.data):(this._chart=bb.generate(this.data),this.newData&&this.onNewData()))}onNewData(){this.newData&&this._chart&&this._chart.load(this.newData)}onStaleData(){this.staleData&&this._chart&&this._chart.unload(this.staleData)}}customElements.define(a.is,a)}if(customElements.get('billboard-charts'))return;const b=document.createElement('template');b.innerHTML=`
    <style>
         :host {
            display: block;
        }
    </style>
    <div id="chartTarget" style="visibility:hidden"></div>`;const c=self.billboard_charts?billboard_charts.href:document.currentScript.src,d=c.split('/').slice(0,-1).join('/'),e=[];if('object'!==typeof d3){const a=self._d3?_d3.href:d+'/d3.min.js';e.push({src:a})}if('undefined'===typeof bb){const a=self._bb?_bb.href:d+'/billboard.min.js';e.push({src:a})}(function(a){return new Promise((b)=>{const c={},d=a.filter((a)=>null!==a);d.forEach((a)=>{c[a.src]=!0}),d.forEach((a)=>{const d=document.createElement('script');d.src=a.src,d.async=!1,d.onload=()=>{Object.keys(c).forEach((a)=>{if(d.src.endsWith(a))return void delete c[a]}),0===Object.keys(c).length&&b()},document.head.appendChild(d)})})})(e).then(()=>{a()})})();